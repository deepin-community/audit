--- a/configure.ac
+++ b/configure.ac
@@ -394,6 +394,19 @@
 AC_MSG_RESULT($use_aarch64)
 
 withval=""
+AC_MSG_CHECKING(whether to include sunway processor support)
+AC_ARG_WITH(sunway,
+AS_HELP_STRING([--with-sunway],[enable Sunway processor support]),
+use_sunway=$withval,
+use_sunway=no)
+if test x$use_sunway != xno ; then
+      AC_DEFINE(WITH_SUNWAY,1,[Define if you want to enable Sunway processor support.])
+fi
+AM_CONDITIONAL(USE_SUNWAY, test x$use_sunway = xyes)
+AC_MSG_RESULT($use_sunway)
+
+withval=""
+
 AC_MSG_CHECKING(whether to use apparmor)
 AC_ARG_WITH(apparmor,
 AS_HELP_STRING([--with-apparmor],[enable AppArmor events]),
--- a/lib/Makefile.am
+++ b/lib/Makefile.am
@@ -54,6 +54,9 @@
 if USE_AARCH64
 BUILT_SOURCES += aarch64_tables.h
 endif
+if USE_SUNWAY
+BUILT_SOURCES += sunway_tables.h
+endif
 noinst_PROGRAMS = gen_actiontabs_h gen_errtabs_h gen_fieldtabs_h \
 	gen_flagtabs_h gen_fstypetabs_h gen_ftypetabs_h gen_i386_tables_h \
 	gen_machinetabs_h gen_msg_typetabs_h \
@@ -65,6 +68,9 @@
 if USE_AARCH64
 noinst_PROGRAMS += gen_aarch64_tables_h
 endif
+if USE_SUNWAY
+noinst_PROGRAMS += gen_sunway_tables_h
+endif
 gen_actiontabs_h_SOURCES = gen_tables.c gen_tables.h actiontab.h
 gen_actiontabs_h_CFLAGS = '-DTABLE_H="actiontab.h"'
 $(gen_actiontabs_h_OBJECTS): CC=$(CC_FOR_BUILD)
@@ -108,6 +114,21 @@
 	./gen_aarch64_tables_h --lowercase --i2s --s2i aarch64_syscall > $@
 endif
 
+if USE_SUNWAY
+gen_sunway_tables_h_SOURCES = gen_tables.c gen_tables.h sunway_table.h
+gen_sunway_tables_h_CFLAGS = '-DTABLE_H="sunway_table.h"'
+$(gen_sunway_tables_h_OBJECTS): CC=$(CC_FOR_BUILD)
+$(gen_sunway_tables_h_OBJECTS): CFLAGS=$(CFLAGS_FOR_BUILD)
+$(gen_sunway_tables_h_OBJECTS): CPPFLAGS=$(CPPFLAGS_FOR_BUILD)
+$(gen_sunway_tables_h_OBJECTS): LDFLAGS=$(LDFLAGS_FOR_BUILD)
+gen_sunway_tables_h$(BUILD_EXEEXT): CC=$(CC_FOR_BUILD)
+gen_sunway_tables_h$(BUILD_EXEEXT): CFLAGS=$(CFLAGS_FOR_BUILD)
+gen_sunway_tables_h$(BUILD_EXEEXT): CPPFLAGS=$(CPPFLAGS_FOR_BUILD)
+gen_sunway_tables_h$(BUILD_EXEEXT): LDFLAGS=$(LDFLAGS_FOR_BUILD)
+sunway_tables.h: gen_sunway_tables_h Makefile
+	./gen_sunway_tables_h --lowercase --i2s --s2i sunway_syscall > $@
+endif
+
 gen_errtabs_h_SOURCES = gen_tables.c gen_tables.h errtab.h
 gen_errtabs_h_CFLAGS = '-DTABLE_H="errtab.h"'
 $(gen_errtabs_h_OBJECTS): CC=$(CC_FOR_BUILD)
--- a/lib/libaudit.h
+++ b/lib/libaudit.h
@@ -583,6 +583,7 @@
 	MACH_S390X,
 	MACH_S390,
 	MACH_ALPHA,	// Deprecated but has to stay
+	MACH_SUNWAY,
 	MACH_ARM,
 	MACH_AARCH64,
 	MACH_PPC64LE
--- a/lib/lookup_table.c
+++ b/lib/lookup_table.c
@@ -41,6 +41,9 @@
 #ifdef WITH_AARCH64
 #include "aarch64_tables.h"
 #endif
+#ifdef WITH_SUNWAY
+#include "sunway_tables.h"
+#endif
 #include "i386_tables.h"
 #include "ppc_tables.h"
 #include "s390_tables.h"
@@ -76,6 +79,9 @@
 #ifdef WITH_AARCH64
     { MACH_AARCH64, AUDIT_ARCH_AARCH64},
 #endif
+#ifdef WITH_SUNWAY
+    { MACH_SUNWAY, AUDIT_ARCH_SW64 },
+#endif
 };
 #define AUDIT_ELF_NAMES (sizeof(elftab)/sizeof(elftab[0]))
 
@@ -133,6 +139,11 @@
 			found = aarch64_syscall_s2i(sc, &res);
 			break;
 #endif
+#ifdef WITH_SUNWAY
+	        case MACH_SUNWAY:
+			found = sunway_syscall_s2i(sc, &res);
+			break;
+#endif
 #endif
 		default:
 			return -1;
@@ -167,6 +178,10 @@
 	        case MACH_AARCH64:
 			return aarch64_syscall_i2s(sc);
 #endif
+#ifdef WITH_SUNWAY
+	        case MACH_SUNWAY:
+			return sunway_syscall_i2s(sc);
+#endif
 	}
 #endif
 	return NULL;
--- a/lib/machinetab.h
+++ b/lib/machinetab.h
@@ -42,3 +42,6 @@
 _S(MACH_AARCH64,   "aarch64"  )
 _S(MACH_AARCH64,   "armv8l")
 #endif
+#ifdef WITH_SUNWAY
+_S(MACH_SUNWAY,   "sw_64"  )
+#endif
--- /dev/null
+++ audit-3.0.9/lib/sunway_table.h
@@ -0,0 +1,385 @@
+/* sunway_table.h --
+ * Copyright 2022 Deepin Technology Co., Ltd.
+ * All Rights Reserved.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * Authors:
+ *      Li Wujun <liwujun@uniontech.com>
+ */
+
+// perl -anE 'chomp; say "_S($F[-1], \"$1\")" if /^#define __NR_(.*)\s+\d+$/' unistd_64.h
+_S(1, "exit")
+_S(2, "fork")
+_S(3, "read")
+_S(4, "write")
+_S(6, "close")
+_S(9, "link")
+_S(10, "unlink")
+_S(12, "chdir")
+_S(13, "fchdir")
+_S(14, "mknod")
+_S(15, "chmod")
+_S(16, "chown")
+_S(17, "brk")
+_S(19, "lseek")
+_S(20, "getxpid")
+_S(22, "umount2")
+_S(23, "setuid")
+_S(24, "getxuid")
+_S(26, "ptrace")
+_S(33, "access")
+_S(36, "sync")
+_S(37, "kill")
+_S(39, "setpgid")
+_S(41, "dup")
+_S(42, "pipe")
+_S(45, "open")
+_S(47, "getxgid")
+_S(48, "sigprocmask")
+_S(51, "acct")
+_S(52, "sigpending")
+_S(54, "ioctl")
+_S(57, "symlink")
+_S(58, "readlink")
+_S(59, "execve")
+_S(60, "umask")
+_S(61, "chroot")
+_S(63, "getpgrp")
+_S(66, "vfork")
+_S(67, "stat")
+_S(68, "lstat")
+_S(71, "mmap")
+_S(73, "munmap")
+_S(74, "mprotect")
+_S(75, "madvise")
+_S(76, "vhangup")
+_S(79, "getgroups")
+_S(80, "setgroups")
+_S(82, "setpgrp")
+_S(87, "gethostname")
+_S(88, "sethostname")
+_S(90, "dup2")
+_S(91, "fstat")
+_S(92, "fcntl")
+_S(94, "poll")
+_S(95, "fsync")
+_S(96, "setpriority")
+_S(97, "socket")
+_S(98, "connect")
+_S(99, "accept")
+_S(100, "odd_getpriority")
+_S(101, "send")
+_S(102, "recv")
+_S(103, "sigreturn")
+_S(104, "bind")
+_S(105, "setsockopt")
+_S(106, "listen")
+_S(111, "sigsuspend")
+_S(113, "recvmsg")
+_S(114, "sendmsg")
+_S(118, "getsockopt")
+_S(119, "socketcall")
+_S(120, "readv")
+_S(121, "writev")
+_S(123, "fchown")
+_S(124, "fchmod")
+_S(125, "recvfrom")
+_S(126, "setreuid")
+_S(127, "setregid")
+_S(128, "rename")
+_S(129, "truncate")
+_S(130, "ftruncate")
+_S(131, "flock")
+_S(132, "setgid")
+_S(133, "sendto")
+_S(134, "shutdown")
+_S(135, "socketpair")
+_S(136, "mkdir")
+_S(137, "rmdir")
+_S(141, "getpeername")
+_S(144, "getrlimit")
+_S(145, "setrlimit")
+_S(147, "setsid")
+_S(148, "quotactl")
+_S(150, "getsockname")
+_S(156, "sigaction")
+_S(166, "setdomainname")
+_S(170, "bpf")
+_S(171, "userfaultfd")
+_S(172, "membarrier")
+_S(173, "mlock2")
+_S(174, "getpid")
+_S(175, "getppid")
+_S(176, "getuid")
+_S(177, "geteuid")
+_S(178, "getgid")
+_S(179, "getegid")
+_S(200, "msgctl")
+_S(201, "msgget")
+_S(202, "msgrcv")
+_S(203, "msgsnd")
+_S(204, "semctl")
+_S(205, "semget")
+_S(206, "semop")
+_S(208, "lchown")
+_S(209, "shmat")
+_S(210, "shmctl")
+_S(211, "shmdt")
+_S(212, "shmget")
+_S(217, "msync")
+_S(229, "statfs64")
+_S(230, "fstatfs64")
+_S(233, "getpgid")
+_S(234, "getsid")
+_S(235, "sigaltstack")
+_S(254, "sysfs")
+_S(256, "getsysinfo")
+_S(257, "setsysinfo")
+_S(271, "pidfd_send_signal")
+_S(272, "io_uring_setup")
+_S(273, "io_uring_enter")
+_S(274, "io_uring_register")
+_S(275, "open_tree")
+_S(276, "move_mount")
+_S(277, "fsopen")
+_S(278, "fsconfig")
+_S(279, "fsmount")
+_S(280, "fspick")
+_S(281, "pidfd_open")
+_S(282, "clone3")
+_S(283, "close_range")
+_S(284, "openat2")
+_S(285, "pidfd_getfd")
+_S(286, "faccessat2")
+_S(287, "process_madvise")
+_S(288, "pkey_mprotect")
+_S(289, "pkey_alloc")
+_S(290, "pkey_free")
+_S(298, "getpriority")
+_S(300, "bdflush")
+_S(302, "mount")
+_S(304, "swapoff")
+_S(305, "getdents")
+_S(306, "create_module")
+_S(307, "init_module")
+_S(308, "delete_module")
+_S(309, "get_kernel_syms")
+_S(310, "syslog")
+_S(311, "reboot")
+_S(312, "clone")
+_S(313, "uselib")
+_S(314, "mlock")
+_S(315, "munlock")
+_S(316, "mlockall")
+_S(317, "munlockall")
+_S(318, "sysinfo")
+_S(321, "oldumount")
+_S(322, "swapon")
+_S(323, "times")
+_S(324, "personality")
+_S(325, "setfsuid")
+_S(326, "setfsgid")
+_S(327, "ustat")
+_S(328, "statfs")
+_S(329, "fstatfs")
+_S(330, "sched_setparam")
+_S(331, "sched_getparam")
+_S(332, "sched_setscheduler")
+_S(333, "sched_getscheduler")
+_S(334, "sched_yield")
+_S(335, "sched_get_priority_max")
+_S(336, "sched_get_priority_min")
+_S(337, "sched_rr_get_interval")
+_S(338, "afs_syscall")
+_S(339, "uname")
+_S(340, "nanosleep")
+_S(341, "mremap")
+_S(342, "nfsservctl")
+_S(343, "setresuid")
+_S(344, "getresuid")
+_S(345, "pciconfig_read")
+_S(346, "pciconfig_write")
+_S(347, "query_module")
+_S(348, "prctl")
+_S(349, "pread64")
+_S(350, "pwrite64")
+_S(351, "rt_sigreturn")
+_S(352, "rt_sigaction")
+_S(353, "rt_sigprocmask")
+_S(354, "rt_sigpending")
+_S(355, "rt_sigtimedwait")
+_S(356, "rt_sigqueueinfo")
+_S(357, "rt_sigsuspend")
+_S(358, "select")
+_S(359, "gettimeofday")
+_S(360, "settimeofday")
+_S(361, "getitimer")
+_S(362, "setitimer")
+_S(363, "utimes")
+_S(364, "getrusage")
+_S(365, "wait4")
+_S(366, "adjtimex")
+_S(367, "getcwd")
+_S(368, "capget")
+_S(369, "capset")
+_S(370, "sendfile")
+_S(371, "setresgid")
+_S(372, "getresgid")
+_S(373, "dipc")
+_S(374, "pivot_root")
+_S(375, "mincore")
+_S(376, "pciconfig_iobase")
+_S(377, "getdents64")
+_S(378, "gettid")
+_S(379, "readahead")
+_S(381, "tkill")
+_S(382, "setxattr")
+_S(383, "lsetxattr")
+_S(384, "fsetxattr")
+_S(385, "getxattr")
+_S(386, "lgetxattr")
+_S(387, "fgetxattr")
+_S(388, "listxattr")
+_S(389, "llistxattr")
+_S(390, "flistxattr")
+_S(391, "removexattr")
+_S(392, "lremovexattr")
+_S(393, "fremovexattr")
+_S(394, "futex")
+_S(395, "sched_setaffinity")
+_S(396, "sched_getaffinity")
+_S(397, "tuxcall")
+_S(398, "io_setup")
+_S(399, "io_destroy")
+_S(400, "io_getevents")
+_S(401, "io_submit")
+_S(402, "io_cancel")
+_S(403, "io_pgetevents")
+_S(404, "rseq")
+_S(405, "exit_group")
+_S(406, "lookup_dcookie")
+_S(407, "epoll_create")
+_S(408, "epoll_ctl")
+_S(409, "epoll_wait")
+_S(410, "remap_file_pages")
+_S(411, "set_tid_address")
+_S(412, "restart_syscall")
+_S(413, "fadvise64")
+_S(414, "timer_create")
+_S(415, "timer_settime")
+_S(416, "timer_gettime")
+_S(417, "timer_getoverrun")
+_S(418, "timer_delete")
+_S(419, "clock_settime")
+_S(420, "clock_gettime")
+_S(421, "clock_getres")
+_S(422, "clock_nanosleep")
+_S(423, "semtimedop")
+_S(424, "tgkill")
+_S(425, "stat64")
+_S(426, "lstat64")
+_S(427, "fstat64")
+_S(428, "vserver")
+_S(429, "mbind")
+_S(430, "get_mempolicy")
+_S(431, "set_mempolicy")
+_S(432, "mq_open")
+_S(433, "mq_unlink")
+_S(434, "mq_timedsend")
+_S(435, "mq_timedreceive")
+_S(436, "mq_notify")
+_S(437, "mq_getsetattr")
+_S(438, "waitid")
+_S(439, "add_key")
+_S(440, "request_key")
+_S(441, "keyctl")
+_S(442, "ioprio_set")
+_S(443, "ioprio_get")
+_S(444, "inotify_init")
+_S(445, "inotify_add_watch")
+_S(446, "inotify_rm_watch")
+_S(447, "fdatasync")
+_S(448, "kexec_load")
+_S(449, "migrate_pages")
+_S(450, "openat")
+_S(451, "mkdirat")
+_S(452, "mknodat")
+_S(453, "fchownat")
+_S(454, "futimesat")
+_S(455, "fstatat64")
+_S(456, "unlinkat")
+_S(457, "renameat")
+_S(458, "linkat")
+_S(459, "symlinkat")
+_S(460, "readlinkat")
+_S(461, "fchmodat")
+_S(462, "faccessat")
+_S(463, "pselect6")
+_S(464, "ppoll")
+_S(465, "unshare")
+_S(466, "set_robust_list")
+_S(467, "get_robust_list")
+_S(468, "splice")
+_S(469, "sync_file_range")
+_S(470, "tee")
+_S(471, "vmsplice")
+_S(472, "move_pages")
+_S(473, "getcpu")
+_S(474, "epoll_pwait")
+_S(475, "utimensat")
+_S(476, "signalfd")
+_S(477, "timerfd")
+_S(478, "eventfd")
+_S(479, "recvmmsg")
+_S(480, "fallocate")
+_S(481, "timerfd_create")
+_S(482, "timerfd_settime")
+_S(483, "timerfd_gettime")
+_S(484, "signalfd4")
+_S(485, "eventfd2")
+_S(486, "epoll_create1")
+_S(487, "dup3")
+_S(488, "pipe2")
+_S(489, "inotify_init1")
+_S(490, "preadv")
+_S(491, "pwritev")
+_S(492, "rt_tgsigqueueinfo")
+_S(493, "perf_event_open")
+_S(494, "fanotify_init")
+_S(495, "fanotify_mark")
+_S(496, "prlimit64")
+_S(497, "name_to_handle_at")
+_S(498, "open_by_handle_at")
+_S(499, "clock_adjtime")
+_S(500, "syncfs")
+_S(501, "setns")
+_S(502, "accept4")
+_S(503, "sendmmsg")
+_S(504, "process_vm_readv")
+_S(505, "process_vm_writev")
+_S(506, "kcmp")
+_S(507, "finit_module")
+_S(508, "sched_setattr")
+_S(509, "sched_getattr")
+_S(510, "renameat2")
+_S(511, "getrandom")
+_S(512, "memfd_create")
+_S(513, "execveat")
+_S(514, "seccomp")
+_S(515, "copy_file_range")
+_S(516, "preadv2")
+_S(517, "pwritev2")
+_S(518, "statx")
--- a/src/libev/ev.c
+++ b/src/libev/ev.c
@@ -839,6 +839,8 @@
       #define ECB_MEMORY_FENCE         __asm__ __volatile__ ("tb1 0,%%r0,128" : : : "memory")
     #elif defined __sh__
       #define ECB_MEMORY_FENCE         __asm__ __volatile__ (""         : : : "memory")
+    #elif defined __sw_64__
+      #define ECB_MEMORY_FENCE         __asm__ __volatile__ ("memb"     : : : "memory")
     #endif
   #endif
 #endif
@@ -1555,6 +1557,7 @@
     || defined __m68k__ \
     || defined __m88k__ \
     || defined __sh__ \
+    || defined __sw_64__ \
     || defined _M_IX86 || defined ECB_MSVC_AMD64 || defined _M_IA64 \
     || (defined __arm__ && (defined __ARM_EABI__ || defined __EABI__ || defined __VFP_FP__ || defined _WIN32_WCE || defined __ANDROID__)) \
     || defined __aarch64__
